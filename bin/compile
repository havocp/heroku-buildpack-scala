#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path

# parse args
BUILD_DIR=$(cd $1; pwd)
CACHE_DIR=$2

# name of the .sbt directory
SBT_HOME=".sbt_home"

# chdir as sbt expects
cd $BUILD_DIR

# unpack cache
for DIR in ".ivy2" "$SBT_HOME"; do
  rm -rf $DIR
  if [ -d $CACHE_DIR/$DIR ]; then
    cp -r $CACHE_DIR/$DIR $DIR
  fi
done

## Determine SBT version. Only 0.7 and 0.10
## are currently supported.
if grep -q 'sbt.version *= *0\.10' project/build.properties ; then
    echo "-----> Selecting SBT 0.10"
    SBT_VERSION="0.10.0"
    SBT_JAR="sbt-launch-$SBT_VERSION.jar"
    ## FIXME put this on S3
    SBT_URL="http://typesafe.artifactoryonline.com/typesafe/ivy-releases/org.scala-tools.sbt/sbt-launch/0.10.0/sbt-launch.jar"
    SBT_SHA1="2ce42a3f7d22dcc8507c17569565e9bc855c8e7a"
    SBT_TASKS="clean package"
else
    echo "-----> Selecting SBT 0.7.7"
    SBT_VERSION="0.7.7"
    SBT_JAR="sbt-launch-$SBT_VERSION.jar"
    SBT_URL="http://s3.amazonaws.com/sclasen-langpack-scala/$SBT_JAR"
    SBT_SHA1="6b5ba879e80a0464c9eaae786bef494e448e6df7"
    SBT_TASKS="clean clean-lib update package"
fi

if [ ! -d .ivy2/cache ]; then  
   mkdir -p .ivy2/cache
fi

if [ ! -f "$SBT_HOME"/"$SBT_JAR" ]; then
  mkdir -p "$SBT_HOME"
  cd "$SBT_HOME"

  ## clean up any old versions
  /bin/rm sbt sbt-launch-*.jar || true

  echo -n "-----> Installing SBT from $SBT_URL..."
  curl --silent --max-time 60 -O --location $SBT_URL

  ## some of the downloads don't have the version in the name,
  ## fix it.
  if [ -f "sbt-launch.jar" ] ; then
      mv "sbt-launch.jar" "$SBT_JAR"
  fi

  ## verify SHA1
  FOUND_SHA1=`sha1sum $SBT_JAR | cut -d ' ' -f 1`
  if test "$SBT_SHA1" != "$FOUND_SHA1" ; then
      echo " failed"
      echo " !     Expected SHA1 \"$SBT_SHA1\" but found \"$FOUND_SHA1\" for $SBT_JAR from $SBT_URL"
      exit 1
  fi

  cd $BUILD_DIR
  echo " done"
fi

#copy the sbt script (do this every time so we can change it if necessary,
#for example if switching sbt version, or just updates to the script)
cp $BIN_DIR/../opt/sbt-$SBT_VERSION "$SBT_HOME"/sbt

# build app
echo "-----> Building app with SBT"
echo "-----> executing sbt $SBT_TASKS"
java -Xmx1024M -Duser.home=$BUILD_DIR -jar "$SBT_HOME"/$SBT_JAR $SBT_TASKS 2>&1 | sed -u 's/^/       /'
if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app with SBT $SBT_VERSION"
  exit 1
fi

## debug: dump jar manifests
TARGET_DIRS=`find -name target`
mkdir -p jar-dump
for T in $TARGET_DIRS ; do
    JARS=`find "$T" -name "*.jar"`
    for J in $JARS ; do
        echo "-----> Dumping $J"
        (cd jar-dump && jar xf ../"$J" && cat META-INF/MANIFEST.MF)
    done
done

# repack cache
mkdir -p $CACHE_DIR
for DIR in ".ivy2" "$SBT_HOME" ; do
  rm -rf $CACHE_DIR/$DIR
  cp -r $DIR $CACHE_DIR/$DIR
done


